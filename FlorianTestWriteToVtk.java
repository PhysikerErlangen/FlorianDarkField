package edu.stanford.rsl.science.darkfield.FlorianDarkField;

import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;

import edu.stanford.rsl.conrad.numerics.SimpleVector;

public class FlorianTestWriteToVtk {

	public static void main(String[] args){
		
		
		
		
		String pathFiberVTK = "E:\\fschiffers\\MeasuredData\\DataTest\\test.vtk";
		
		writeToVectorField(pathFiberVTK);
		
		System.out.println("All Data was written");
	
	}
	
	
	public static void writeToVectorField(String pathFiberVTK){

		int imgSizeX = 3;
		int imgSizeY = 3;
		int imgSizeZ = 3;
		
		double[] spacing = new double[]{1.0,1.0,1.0};
		double[] origin = new double[]{0,0,0};
		
		
		int[] dimensions=new int[]{imgSizeX,imgSizeY,imgSizeZ};

		try{
			FileOutputStream foStream = new FileOutputStream(pathFiberVTK);
			BufferedWriter bufWriter = new BufferedWriter(new OutputStreamWriter(foStream));
			
			bufWriter.write("# vtk DataFile Version 3.0");
			bufWriter.write(System.getProperty( "line.separator" ));
			bufWriter.write("VTK File Generated by Insight Segmentation and Registration Toolkit (ITK)");
			bufWriter.write(System.getProperty( "line.separator" ));
			bufWriter.write("ASCII");
			bufWriter.write(System.getProperty( "line.separator" ));
			bufWriter.write("DATASET STRUCTURED_POINTS");
			bufWriter.write(System.getProperty( "line.separator" ));
			
			// Write dimension of 3D Grid
			bufWriter.write("DIMENSIONS " + 
					imgSizeX + " " + 
					imgSizeY + " " +
					imgSizeZ);
			bufWriter.write(System.getProperty( "line.separator" ));
			
			// Write spacing of grid (we assume grid to be equal spaced)
			bufWriter.write("SPACING "+ 
					spacing[0] + " " +  
					spacing[1] + " " +
					spacing[2] + " " );
			
			 bufWriter.write(System.getProperty( "line.separator" ));
			
			// Write Origin in world coordinates
			bufWriter.write("ORIGIN "
					+ origin[0] + " " 
					+ origin[1] + " " 
					+ origin[2]);
			
			bufWriter.write(System.getProperty( "line.separator" ));
			
			// Writer number of points
			bufWriter.write("POINT_DATA " + 
					imgSizeX*imgSizeY*imgSizeZ);
			
			bufWriter.write(System.getProperty( "line.separator" ));
			
			// TODO Not sure why that
			bufWriter.write("VECTORS vectors float");
			
			
			for (int x = 0; x < imgSizeX; x++){
				for (int y = 0; y < imgSizeY; y++){
					for (int z = 0; z < imgSizeZ; z++){

						SimpleVector direction;
						
						if(x==1){
							 direction = new SimpleVector(0.0,0,0);
							}
						else if(x==0){
							 direction = new SimpleVector(0.0,5.0,0);
							}else{
								 direction = new SimpleVector(0.0,1.0,0.0);
							}
	

					bufWriter.write(System.getProperty( "line.separator" ));
					bufWriter.write(direction.getElement(0) + " ");
					bufWriter.write(direction.getElement(1)+" ");
					bufWriter.write("" +direction.getElement(2) + " ");


					
					
				}
			}
			}

			
	
			
			
			bufWriter.flush();
			foStream.close();
			}
		catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}
	
	
}
